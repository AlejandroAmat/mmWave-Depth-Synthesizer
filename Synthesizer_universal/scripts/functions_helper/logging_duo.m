function logging_duo(logFile, obj1_name, CAD1_idx, obj2_name, CAD2_idx, ...
    N_RX_az, N_RX_el, atn_bdl, ...
    vibration_mode_radar, vibr_azi_stdev, vibr_rho_stdev, vibr_elv_stdev,...
    vibration_mode_cam, vibr_x_stdev, vibr_y_stdev, vibr_z_stdev,...
    N_sample, N_phi, N_theta, N_y_heat, N_x_heat, N_z_heat, N_pixel_col, N_pixel_row,...
    azi_FOV, phi_res_deg, elv_FOV, theta_res_deg, rho_max, rho_res,...
    cam_hfov_deg, cam_vfov_deg, cam_res_deg, cam_range_min, cam_range_max,...
    sensor_x, sensor_y, height_offset, top_offset, sensor_ang_deg,...
    scene_lim_edge, translate_lim_1, translate_lim_2, threshold_factor)

    %logFile = strcat("..",SLASH,"results",SLASH,object_name,"_",num2str(CAD_idx),SLASH,"log.txt");
    fID = fopen(logFile,'w');
    fprintf(fID,strcat("\n\t( ◞•̀w•́)◞\t",obj1_name," #%d - ",obj2_name,...
        " #%d","\t◟(•̀w•́◟ )\n\n"), CAD1_idx, CAD2_idx);
    fprintf(fID,strcat("> Size of antenna array (horizontal*vertical)\n",...
        "\t%d x %d\n\n"), N_RX_az, N_RX_el);
    fprintf(fID,strcat("> Size of antenna array element bundle(horizontal*vertical)\n",...
        "\t%d x %d\n\n"), atn_bdl(1), atn_bdl(2));
    fprintf(fID,strcat("> Vibration modes",...
        "\t( 0/1 [off/on] in x/azimuth, y/range, z/elevation directions [mm])\n",...
        "\tRadar\t-> ",vibration_mode_radar,"\tstdev =\t%.2f\t%.2f\t%.2f\n",...
        "\tCamera\t-> ",vibration_mode_cam,"\tstdev =\t%.2f\t%.2f\t%.2f\n\n"),...
        vibr_azi_stdev, vibr_rho_stdev, vibr_elv_stdev, vibr_x_stdev, vibr_y_stdev, vibr_z_stdev);
    fprintf(fID,strcat("> Spherical intensity dimension (range*azimuth*elevation) ",...
        "[voxel]\n\t%d x %d x %d\n\n"), N_sample, N_phi, N_theta);
    fprintf(fID,strcat("> Cartesian intensity dimension (y*x*z) [voxel]\n", ...
        "\t%d x %d x %d\n\n"), N_y_heat, N_x_heat, N_z_heat);
    fprintf(fID,strcat("> Image resolution (column*row) [pixel]\n",...
        "\t%d x %d\n\n"), N_pixel_col, N_pixel_row);
    fprintf(fID,strcat("> Radar FOV\n", ...
        "\tAzimuth[deg]:\t%d\t\tres:\t%.4f\n",...
        "\tElevation[deg]:\t%d\t\tres:\t%.4f\n",...
        "\tRange[m]:\t%.4f\t\tres:\t%.4f","\n\n"),...
        azi_FOV, phi_res_deg, elv_FOV, theta_res_deg, rho_max, rho_res);
    fprintf(fID,strcat("> Camera FOV\n",...
        "\tAzimuth[deg]:\t%.4f\t\tres:\t%.4f\n",...
        "\tElevation[deg]:\t%.4f\t\tres:\t%.4f\n",...
        "\tRange[m]:\t[%.1f, %.1f]\t\tres:\t%.4f\n\n"),...
        cam_hfov_deg, cam_res_deg, cam_vfov_deg, cam_res_deg,...
        cam_range_min, cam_range_max, (cam_range_max-cam_range_min)/256);   
    fprintf(fID,strcat("> Sensor positions (x,y) [m]\t(w/ respect to sensor #1)\n", ...
        "\tSensor #1\tSensor #2\tSensor #3\tSensor #4\n",...
        "\t(%.3f, %.3f)\t(%.3f, %.3f)\t(%.3f, %.3f)\t(%.3f, %.3f)","\n\n"),...
        [sensor_x;sensor_y]/1000); 
    fprintf(fID,"> Sensor height (z) [m]\n\t%.3f\n\n",height_offset/1000); 
    fprintf(fID,strcat("> Sensor orientations [deg]\t(w/ respect to sensor #1)\n", ...
        "\t(North->0    West->90    South->180    East->270)\n",...
        "\tSensor #1\tSensor #2\tSensor #3\tSensor #4\n",...
        "\t%d\t\t%d\t\t%d\t\t%d","\n\n"),sensor_ang_deg); 
    fprintf(fID,strcat("> Top sensor #0 (if used)\n",...
        "\tPosition[m]:\t(%.3f, %.3f, %.3f) (x,y,z)\n",...
        "\tOrientation:\tdownward\n\n"),[sensor_x(1),sensor_y(2),top_offset]/1000); 
    fprintf(fID,strcat("> Object 1 placement region [m] \t(w/ respect to sensor #1)\n",...
        "\tx from\t%.3f\tto\t%.3f\n\ty from\t%.3f\tto\t%.3f\n\n"),translate_lim_1'/1000);
    fprintf(fID,strcat("> Object 2 placement region [m] \t(w/ respect to sensor #1)\n",...
        "\tx from\t%.3f\tto\t%.3f\n\ty from\t%.3f\tto\t%.3f\n\n"),translate_lim_2'/1000);
    fprintf(fID,strcat("> Cartesian heatmap region [m] \t(w/ respect to sensor #1)\n",...
        "\tx from\t%.3f\tto\t%.3f\n\ty from\t%.3f\tto\t%.3f\n\tz from\t%.3f\tto\t%.3f\n\n"),... 
        scene_lim_edge');
    fprintf(fID,"> Sph2Cart Conversion threshold [%%]\n\t%.2f\n\n", threshold_factor*100); 

    fclose(fID);
    %type(logFile);
end
